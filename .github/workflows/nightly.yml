name: Nightly PKG

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

permissions:
  contents: read
  actions: write  # We need this to be able to cancel workflow if job fails

jobs:
  AppImage:
    if: github.repository == 'darktable-org/darktable' || github.event_name == 'workflow_dispatch'
    name: Nightly darktable AppImage
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        compiler:
          - { compiler: GNU12, CC: gcc-12, CXX: g++-12, packages: gcc-12 g++-12 }
        branch:
          - { code: master, label: gitmaster }
    env:
      CC: ${{ matrix.compiler.CC }}
      CXX: ${{ matrix.compiler.CXX }}
      SRC_DIR: ${{ github.workspace }}/src
      BUILD_DIR: ${{ github.workspace }}/build
      INSTALL_PREFIX: ${{ github.workspace }}/AppDir/usr
      CMAKE_BUILD_TYPE: ${{ matrix.btype }}
      GENERATOR: ${{ matrix.generator }}
      TARGET: ${{ matrix.target }}
      DARKTABLE_CLI: ${{ github.workspace }}/AppDir/usr/bin/darktable-cli
      BRANCH: ${{ matrix.branch.code }}
      BUILD_NAME: ${{ matrix.branch.label }}
    steps:
      - name: Install compiler ${{ matrix.compiler.compiler }}
        run: |
          # Remove azure mirror because it is unreliable and sometimes unpredictably leads to failed CI
          sudo sed -i 's/azure\.//' /etc/apt/sources.list
          sudo apt-get update
          sudo apt-get -y install \
            ${{ matrix.compiler.packages }}
      - name: Install Base Dependencies
        run: |
          sudo apt-get -y install \
            build-essential \
            appstream-util \
            desktop-file-utils \
            gettext \
            git \
            gdb \
            intltool \
            libatk1.0-dev \
            libcairo2-dev \
            libcolord-dev \
            libcolord-gtk-dev \
            libcups2-dev \
            libcurl4-gnutls-dev \
            libimage-exiftool-perl \
            libfuse2 \
            libgdk-pixbuf2.0-dev \
            libglib2.0-dev \
            libgraphicsmagick1-dev \
            libgtk-3-dev \
            libinih-dev \
            libjpeg-dev \
            libjson-glib-dev \
            liblcms2-dev \
            liblensfun-dev \
            liblensfun-bin \
            liblensfun-data-v1 \
            liblensfun1 \
            libopenjp2-7-dev \
            libosmgpsmap-1.0-dev \
            libpango1.0-dev \
            libpng-dev \
            libportmidi-dev \
            libpugixml-dev \
            librsvg2-dev \
            libsaxon-java \
            libsdl2-dev \
            libsecret-1-dev \
            libsqlite3-dev \
            libtiff5-dev \
            libwebp-dev \
            libx11-dev \
            libxml2-dev \
            libxml2-utils \
            ninja-build \
            perl \
            po4a \
            python3-jsonschema \
            xsltproc \
            zlib1g-dev \
            appstream;
          sudo add-apt-repository -y ppa:savoury1/graphics
          sudo add-apt-repository -y ppa:savoury1/ffmpeg4
          sudo add-apt-repository -y ppa:savoury1/display
          sudo apt-get update
          sudo apt-get -y install \
            libavif-dev \
            libgmic-dev \
            libgphoto2-dev \
            libheif-dev \
            libimath-dev \
            libopenexr-dev \
            libjxl-dev \
            x11proto-dev \
            libxfixes-dev;
      - name: Build and install a more recent version of exiv2
        run: |
          git clone --branch v0.28.3 --depth 1 https://github.com/Exiv2/exiv2 src-exiv2
          cd src-exiv2
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=ON \
            -DEXIV2_ENABLE_NLS=ON \
            -DEXIV2_ENABLE_VIDEO=OFF \
            -DCMAKE_INSTALL_PREFIX=/usr
          cmake --build build
          sudo cmake --install build
          cd ..
      - name: Cancel workflow if job fails
        if: ${{ failure() }}
        uses: andymckay/cancel-action@0.5
      - name: Checkout darktable master branch
        run: |
          # Note that we can't make a shallow clone to reduce clone traffic and time, as we have to
          # fetch the entire history to correctly generate the version for the AppImage filename
          git clone https://github.com/darktable-org/darktable src
          pushd src
          git submodule init
          git config submodule.src/tests/integration.update none
          git submodule update
          git checkout tags/release-4.8.1
          popd
      - name: Update lensfun data
        continue-on-error: true
        run: |
          sudo lensfun-update-data
      - name: Build and Install
        run: |
          cd src
          bash tools/appimage-build-script.sh
      - name: Package upload
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/src/build/Darktable-*.AppImage*
          name: artifact-appimage
          retention-days: 1


  upload_to_release:
    permissions:
      # We need write permission to update the nightly tag
      contents: write
    runs-on: ubuntu-latest
    needs: [AppImage]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
      - name: Update nightly release
        uses: andelf/nightly-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly
          name: 'Darktable 4.8.1 AppImage'
          # Please do not modify the body text by adding line breaks in paragraphs, as this text should display well on screens of different widths
          body: |
            The AppImage package is compatible with distribution releases that have glibc version 2.35 or higher. For example, if we consider some popular distributions, Ubuntu 22.04, Debian 12, Fedora 36 and newer releases are compatible.

            The `*.AppImage.zsync` file is not intended to be downloaded and used locally. Just ignore it. This file contains technical information required by AppImage auto-updaters such as [AppImageUpdate](https://appimage.github.io/AppImageUpdate/).

            __Please help us improve Darktable by reporting any issues you encounter!__ :wink:
          files: |
            artifact-appimage/*
