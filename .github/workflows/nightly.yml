name: Nightly PKG

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

permissions:
  contents: read
  actions: write  # We need this to be able to cancel workflow if job fails

jobs:
  AppImage:
    if: github.repository == 'darktable-org/darktable' || github.event_name == 'workflow_dispatch'
    name: Nightly darktable AppImage
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.distro }}
      options: --cap-add SYS_ADMIN --device /dev/fuse --tmpfs /tmp:exec --tmpfs /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}:exec
    strategy:
      fail-fast: false
      matrix:
        distro:
          - "debian:bookworm-slim"
        compiler:
          - { compiler: GNU12, CC: gcc-12, CXX: g++-12, packages: gcc-12 g++-12 }
        branch:
          - { code: master, label: gitmaster }
    env:
      DISTRO: ${{ matrix.distro }}
      CC: ${{ matrix.compiler.CC }}
      CXX: ${{ matrix.compiler.CXX }}
      SRC_DIR: ${{ github.workspace }}/src
      BUILD_DIR: ${{ github.workspace }}/build
      INSTALL_PREFIX: ${{ github.workspace }}/AppDir/usr
      CMAKE_BUILD_TYPE: ${{ matrix.btype }}
      GENERATOR: ${{ matrix.generator }}
      TARGET: ${{ matrix.target }}
      DARKTABLE_CLI: ${{ github.workspace }}/AppDir/usr/bin/darktable-cli
      BRANCH: ${{ matrix.branch.code }}
      BUILD_NAME: ${{ matrix.branch.label }}
    steps:
      - name: Configure APT
        timeout-minutes: 1
        run: |
          set -xe
          tee /etc/dpkg/dpkg.cfg.d/force-unsafe-io > /dev/null <<EOT
          force-unsafe-io
          EOT
          tee /etc/apt/apt.conf.d/tmpfs > /dev/null <<EOT
          Dir::Cache::Archives "/tmp/apt/archives";
          APT::ExtractTemplates::TempDir "/tmp/apt/temp";
          EOT
          mkdir -p /tmp/apt/archives
          tee /etc/apt/apt.conf.d/80retry > /dev/null <<EOT
          Acquire::Retries "10";
          EOT
          tee /etc/apt/apt.conf.d/80recommends > /dev/null <<EOT
          APT::Install-Recommends "false";
          EOT
          tee /etc/apt/apt.conf.d/80suggests > /dev/null <<EOT
          APT::Install-Suggests "false";
          EOT
          tee /etc/apt/apt.conf.d/80forceyes > /dev/null <<EOT
          APT::Get::Assume-Yes "true";
          EOT
          tee /etc/apt/apt.conf.d/80fixmissing > /dev/null <<EOT
          APT::Get::Fix-Missing "true";
          EOT
          rm -rf /etc/apt/sources.list*
          if [ "${DISTRO}" = "debian:trixie-slim" ]; then
          tee /etc/apt/sources.list > /dev/null <<EOT
          deb http://debian-archive.trafficmanager.net/debian trixie main
          deb http://debian-archive.trafficmanager.net/debian trixie-updates main
          deb http://debian-archive.trafficmanager.net/debian-security trixie-security main
          deb http://debian-archive.trafficmanager.net/debian trixie-backports main
          EOT
          elif [ "${DISTRO}" = "debian:bookworm-slim" ]; then
          tee /etc/apt/sources.list > /dev/null <<EOT
          deb http://debian-archive.trafficmanager.net/debian bookworm main
          deb http://debian-archive.trafficmanager.net/debian bookworm-updates main
          deb http://debian-archive.trafficmanager.net/debian-security bookworm-security main
          deb http://debian-archive.trafficmanager.net/debian bookworm-backports main
          EOT
          fi
      - name: Update base packages
        timeout-minutes: 1
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          set -xe
          rm -rf /var/lib/apt/lists/*
          apt-get update
          # apt-get install eatmydata
          apt-get upgrade
      - name: Install compiler ${{ matrix.compiler.compiler }}
        run: |
          # Remove azure mirror because it is unreliable and sometimes unpredictably leads to failed CI
          # sudo sed -i 's/azure\.//' /etc/apt/sources.list
          # sudo apt-get update
          apt-get -y install \
            ${{ matrix.compiler.packages }}
      - name: Install Base Dependencies
        run: |
          apt-get -y install \
            build-essential \
            cmake \
            appstream-util \
            desktop-file-utils \
            fuse \
            gettext \
            git \
            gdb \
            intltool \
            libatk1.0-dev \
            libavif-dev \
            libcairo2-dev \
            libcolord-dev \
            libcolord-gtk-dev \
            libcups2-dev \
            libcurl4-gnutls-dev \
            libfuse2 \
            libgdk-pixbuf2.0-dev \
            libglib2.0-dev \
            libgmic-dev \
            libgphoto2-dev \
            libgraphicsmagick1-dev \
            libgtk-3-dev \
            libheif-dev \
            libimath-dev \
            libinih-dev \
            libjpeg-dev \
            libjson-glib-dev \
            libjxl-dev \
            liblcms2-dev \
            liblensfun-dev \
            liblensfun-bin \
            liblensfun-data-v1 \
            liblensfun1 \
            libopenexr-dev \
            libopenjp2-7-dev \
            libosmgpsmap-1.0-dev \
            libpango1.0-dev \
            libpng-dev \
            libportmidi-dev \
            libpugixml-dev \
            libraw-dev \
            librsvg2-dev \
            libsaxon-java \
            libsdl2-dev \
            libsecret-1-dev \
            libsqlite3-dev \
            libtiff5-dev \
            libwebp-dev \
            libx11-dev \
            libxml2-dev \
            libxml2-utils \
            ninja-build \
            perl \
            po4a \
            python3-jsonschema \
            xsltproc \
            wget \
            zlib1g-dev \
            appstream;
      - name: Build and install a more recent version of exiv2
        run: |
          git clone --branch v0.28.2 --depth 1 https://github.com/Exiv2/exiv2 src-exiv2
          cd src-exiv2
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=ON \
            -DEXIV2_ENABLE_VIDEO=OFF \
            -DCMAKE_INSTALL_PREFIX=/usr
          cmake --build build
          cmake --install build
          cd ..
      - name: Cancel workflow if job fails
        if: ${{ failure() }}
        uses: andymckay/cancel-action@0.4
      - name: Checkout darktable master branch
        run: |
          # Note that we can't make a shallow clone to reduce clone traffic and time, as we have to
          # fetch the entire history to correctly generate the version for the AppImage filename
          git clone https://github.com/darktable-org/darktable src
          cd src
          git submodule init
          git config submodule.src/tests/integration.update none
          git submodule update
          cd -
      - name: Update lensfun data
        continue-on-error: true
        run: |
          lensfun-update-data
      - name: Build and Install
        run: |
          cd src
          # We need the following environment variable to run linuxdeploy appimage in the container
          export APPIMAGE_EXTRACT_AND_RUN=1
          bash tools/appimage-build-script.sh
      - name: Package upload
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/src/build/Darktable-*.AppImage*
          name: artifact-appimage
          retention-days: 1

